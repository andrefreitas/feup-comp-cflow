
options
{
  LOOKAHEAD = 1;
  //FORCE_LA_CHECK = true;
}

PARSER_BEGIN(DFA_Generator)

import java.util.Set;
import java.util.TreeSet;

import java.util.Iterator;

public class DFA_Generator
{
	public static void main(String args [])
	{
		new DFA_Generator(System.in);
		try
		{
			System.out.print("Give the expression: ");
			      
			SimpleNode root = DFA_Generator.Start();
			
			root.dump("");
			Set< String > alphabet = new TreeSet<String>();
			root.getAlphabet(alphabet);

			System.out.println("Alphabet:");
			for (Iterator<String> it = alphabet.iterator(); it.hasNext(); ) {
		        String f = it.next();
		        System.out.println(f);
		    }
		}
		catch (Exception e)
		{
			System.out.println("Oops.");
			System.out.println(e.getMessage());
		}
	}
}

PARSER_END(DFA_Generator)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN : 
{
	< NUMBER : (["0"-"9"])+ >
	| < IDENTIFIER : ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"])* >
	| < SEPARATOR : ".">
	| < OR :"|" >
	| < ONE_OR_MORE :"+" >
	| < ZERO_OR_MORE :"*" >
	| < ZERO_OR_ONE :"?" >
	| < LEFT_PAR: "(" >
	| < RIGHT_PAR: ")" >
	| < NLINE : "\n" >
}

SimpleNode Start() :
{}
{
  Expr_Main() < NLINE >
	 {
		System.out.println("ok");
		return jjtThis;
	}  
}

void Expr_Main() #void : 
{} 
{
	Expr_Concat() ("|" Expr_Main()
	{
		jjtThis.op = SimpleNode.OR;
	} #OR(2))?
} 

void Expr_Concat() #void:
{}
{	Expr_Node() ("." Expr_Main()
	{
		jjtThis.op = SimpleNode.AND;
	} #AND(2))?
}

void Expr_Node() #void:
{Token t;}
{
	( (< LEFT_PAR > Expr_Main() < RIGHT_PAR > #PAR)
	| (t = < IDENTIFIER >	{		jjtThis.op = SimpleNode.ID;
		jjtThis.identifier = t.image;
	} #ID))
	((< ONE_OR_MORE >
	{		jjtThis.timesType = SimpleNode.PLUS;
	}
	| < ZERO_OR_MORE >
	{		jjtThis.timesType = SimpleNode.STAR;
	}
	| < ZERO_OR_ONE >
	{		jjtThis.timesType = SimpleNode.QUESTIONM;
	}
	| ("{" t = < NUMBER >
			{				jjtThis.timesType = SimpleNode.TIMES;
				jjtThis.timLeft = Integer.parseInt(t.image);
			}

		(		  ","
			{				jjtThis.timesType = SimpleNode.TIMESLEFT;
			}
	
			(			  t = < NUMBER >
				{					jjtThis.timesType = SimpleNode.TIMESINT;
					jjtThis.timRight = Integer.parseInt(t.image);
				}
			)?
		)?
	"}") ) #TIMES)?
}
/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DFA_Generator.jj */
/*@egen*/
options
{
  LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(DFA_Generator)

public class DFA_Generator/*@bgen(jjtree)*/implements DFA_GeneratorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTDFA_GeneratorState jjtree = new JJTDFA_GeneratorState();

/*@egen*/
  public static void main(String args [])
  {
    new DFA_Generator(System.in);
    try
    {
      System.out.print("Give the expression: ");
      DFA_Generator.Start();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(DFA_Generator)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN : 
{
	< IDENTIFIER : (["A"-"Z","a"-"z","0"-"9"])+ >
	| < SEPARATOR : ".">
	| < OR :"|" >
	| < ONE_OR_MORE :"+" >
	| < ZERO_OR_MORE :"*" >
	| < ZERO_OR_ONE :"?" >
	| < NUMBER : (["0"-"9"])+ >
	| < LEFT_PAR: "(" >
	| < RIGHT_PAR: ")" >
	| < QUANTIFIER_1: "{" < NUMBER > "}" >
	| < QUANTIFIER_2: "{" < NUMBER > "," "}" >
	| < QUANTIFIER_3: "{" < NUMBER > "," < NUMBER > "}" >
	| < NLINE : "\n" >
  
}

void Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expr_Main() < NLINE >/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		System.out.println("ok");
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Expr_Main():
{/*@bgen(jjtree) Expr_Main */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_MAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr_Main */
        try {
/*@egen*/
	Expr_Concat() ("|" Expr_Main())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void Expr_Concat():
{/*@bgen(jjtree) Expr_Concat */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_CONCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr_Concat */
        try {
/*@egen*/	Expr_Times() ("." Expr_Main())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr_Times():
{/*@bgen(jjtree) Expr_Times */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_TIMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr_Times */
        try {
/*@egen*/
	( (< LEFT_PAR > Expr_Main() < RIGHT_PAR > )| < IDENTIFIER >) (< ONE_OR_MORE > | < ZERO_OR_MORE > | < ZERO_OR_ONE > | < QUANTIFIER_1 > | < QUANTIFIER_2 > | < QUANTIFIER_3 >)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DFA_Generator.jj */
/*@egen*/
options
{
  LOOKAHEAD = 1;
  //FORCE_LA_CHECK = true;
}

PARSER_BEGIN(DFA_Generator)
package parser;
import java.util.Set;
import java.util.TreeSet;
import java.util.HashMap;
import java.util.ArrayList;

import java.util.Iterator;

public class DFA_Generator/*@bgen(jjtree)*/implements DFA_GeneratorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTDFA_GeneratorState jjtree = new JJTDFA_GeneratorState();

/*@egen*/
	public static void main(String args [])
	{
		new DFA_Generator(System.in);
		try
		{
			System.out.print("Give the expression: ");
			      
			SimpleNode root = DFA_Generator.Start();
			
			root.dump("");
			Set< String > alphabet = new TreeSet<String>();
			Set< String > states = new TreeSet<String>();
			HashMap< String, String > transitions = new HashMap<String, String>();
			Set< String > accept_states = new TreeSet<String>();
			String initialState = "q0";
			states.add(initialState);
			root.parseDFA(alphabet, states, transitions, accept_states);

			System.out.println("Alphabet:");
			for (Iterator<String> it = alphabet.iterator(); it.hasNext(); ) {
		        String f = it.next();
		        System.out.println(f);
		    }
		}
		catch (Exception e)
		{
			System.out.println("Oops.");
			System.out.println(e.getMessage());
		}
	}
}

PARSER_END(DFA_Generator)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN : 
{
	< NUMBER : (["0"-"9"])+ >
	| < IDENTIFIER : ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"])* >
	| < SEPARATOR : ".">
	| < OR :"|" >
	| < ONE_OR_MORE :"+" >
	| < ZERO_OR_MORE :"*" >
	| < ZERO_OR_ONE :"?" >
	| < LEFT_PAR: "(" >
	| < RIGHT_PAR: ")" >
	| < NLINE : "\n" >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expr_Main() < NLINE >/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		System.out.println("ok");
		return jjtn000;
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Expr_Main()       : 
{} 
{
	Expr_Concat() ("|" Expr_Main()/*@bgen(jjtree) #OR( 2) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
        }
/*@egen*/
	{
		jjtn001.op = SimpleNode.OR;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/       )?
} 

void Expr_Concat()      :
{}
{	Expr_Node() ("." Expr_Main()/*@bgen(jjtree) #AND( 2) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
        }
/*@egen*/
	{
		jjtn001.op = SimpleNode.AND;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/        )?
}

void Expr_Node()      :
{Token t;}
{
	( (< LEFT_PAR > Expr_Main()/*@bgen(jjtree) PAR */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(JJTPAR);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ < RIGHT_PAR >/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001, true);
                                      }
                                    }
/*@egen*/     )
	| (t = < IDENTIFIER >/*@bgen(jjtree) ID */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTID);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
        }
/*@egen*/	{		jjtn002.op = SimpleNode.ID;
		jjtn002.identifier = t.image;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/    ))
	(/*@bgen(jjtree) TIMES */
         {
           SimpleNode jjtn003 = new SimpleNode(JJTTIMES);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
         }
         try {
/*@egen*/(< ONE_OR_MORE >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
        }
/*@egen*/
	{		jjtn003.timesType = SimpleNode.PLUS;
	}
	| < ZERO_OR_MORE >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
        }
/*@egen*/
	{		jjtn003.timesType = SimpleNode.STAR;
	}
	| < ZERO_OR_ONE >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
        }
/*@egen*/
	{		jjtn003.timesType = SimpleNode.QUESTIONM;
	}
	| ("{" t = < NUMBER >
			{				jjtn003.timesType = SimpleNode.TIMES;
				jjtn003.timLeft = Integer.parseInt(t.image);
			}

		(		  ","
			{				jjtn003.timesType = SimpleNode.TIMESLEFT;
			}
	
			(			  t = < NUMBER >
				{					jjtn003.timesType = SimpleNode.TIMESINT;
					jjtn003.timRight = Integer.parseInt(t.image);
				}
			)?
		)?
	"}") )/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
           }
         }
/*@egen*/       )?
}